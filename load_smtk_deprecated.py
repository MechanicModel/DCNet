'''@File    :   load_smtk.py@Time    :   2021/07/19 17:32:22@Author  :   Li Yang @Version :   1.0@Contact :   liyang259@mail2.sysu.edu.cn@License :   (C)Copyright 2020-2021, Li Yang@Desc    :   None''''该模块将指定路径的MRI图像(nii.gz格式)与标签通过Crop、Pad操作reszie到设定大小并将sample和label分别合并为两个npy数组并保存到指定路径.'import SimpleITK as sitkimport numpy as npimport matplotlib.pyplot as pltimport osfrom config import Config as cgfrom utility import *'''mr_image = sitk.ReadImage('../SrcData/Sample/sample1.nii.gz')mr_npy = sitk.GetArrayFromImage(mr_image)mr_show = mr_npy[35,:,:]plt.imshow(mr_show,cmap='gray')plt.show()'''def main():    inputfolder = '../SrcData'    outputfolder = '../SrcData/IMG'    labeFolder = 'Label'    sampleFolder = 'Sample'    if os.path.exists(outputfolder + '/' + 'sample'):        pass     else:         print("Created ouput directory: " + outputfolder + 'sample')        os.mkdir(outputfolder + '/' + 'sample')        if os.path.exists(outputfolder + '/' + 'label'):        pass     else:         print("Created ouput directory: " + outputfolder + 'label')        os.mkdir(outputfolder + '/' + 'label')            sample = np.zeros([cg.image_size,cg.image_size], dtype = np.uint16)    label = np.zeros([cg.image_size,cg.image_size], dtype = np.uint16)        print('Load samples')        sampleFile = os.listdir(inputfolder + '/' + sampleFolder)    # Create Resampling Grid    resampling_grid = sitk.gridSource()        for file in sampleFile:            sample_obj = sitk.ReadImage(inputfolder + '/' + sampleFolder + '/' + file)            sampleArray = sitk.GetArrayFromImage(sample_obj)            if sampleArray.shape == cg.image_size:                pass            else:                print(file + ' ' + 'size:' + str(sampleArray.shape))                sampleArray = resize(sampleArray, cg.image_size)                print(file + ' ' + 'Resized:' + str(sampleArray.shape))            print(sampleArray.shape)            sample = np.concatenate((sample,sampleArray), axis=2)            print(file + ' loaded & appended.')    cout = 0        for file in labelFile:        try:            labelArray = nib.load(inputfolder + '/' + labelFolder + '/' + file).get_fdata()                        if shape[cout] == labelArray.shape:                pass            else:                 print(file + '\'s shape doesn\'t match.')                print('sample size:' + str(shape[cout]))                print('label size:' + str(labelArray.shape))                raise AssertionError('Shape doesn\'t match')                        if labelArray.shape[:2]== (cg.image_size, cg.image_size):                pass            else:               print(file + ' ' + 'size:' + str(labelArray.shape))               labelArray = resize(labelArray, cg.image_size)               print(file + ' ' + 'Resized:' + str(labelArray.shape))             label = np.concatenate((label, labelArray), axis= 2)            print(file + ' ' + 'loaded & appended.')            cout += 1        except nib.filebasedimages.ImageFileError :            pass        # 防止隐藏文件        sample = sample[:,:,1:]    label = label[:,:,1:]    sample = np.transpose(sample, (2,0,1))    label = np.transpose(label, (2,0,1))    sample = np.expand_dims(sample, axis=1)    label = np.expand_dims(label, axis =1)    # nii体素值非灰度值，可以在[0,255]之外, 转换为NCHW格式    print('All samples loaded & npy shape is:' + str(sample.shape))    print('All labels loaded & npy shape is:' + str(label.shape))    np.save(outputfolder + '/' + sampleFolder + '/' + 'sample.npy', sample)    np.save(outputfolder + '/' + labelFolder + '/' + 'label.npy', label)        print('samples have been saved in' + outputfolder + '/' + sampleFolder)    print('labels have been saved in' + outputfolder + '/' + labelFolder)    if __name__ == '__main__':    main(sys.argv)